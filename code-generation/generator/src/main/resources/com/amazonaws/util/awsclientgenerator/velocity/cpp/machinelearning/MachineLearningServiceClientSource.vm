#parse("com/amazonaws/util/awsclientgenerator/velocity/cfamily/Attribution.vm")

#set($metadata = $serviceModel.metadata)
#set($className = "${metadata.classNamePrefix}Client")
\#include <aws/core/utils/Outcome.h>
\#include <aws/core/auth/AWSAuthSigner.h>
\#include <aws/core/client/CoreErrors.h>
\#include <aws/core/client/RetryStrategy.h>
\#include <aws/core/http/HttpClient.h>
\#include <aws/core/http/HttpResponse.h>
\#include <aws/core/http/HttpClientFactory.h>
\#include <aws/core/auth/AWSCredentialsProviderChain.h>
\#include <aws/core/utils/json/JsonSerializer.h>
\#include <aws/core/utils/memory/stl/AWSStringStream.h>
\#include <aws/core/utils/threading/Executor.h>
\#include <aws/core/utils/logging/LogMacros.h>
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientSourceHeaders.vm")

using namespace Aws;
using namespace Aws::Auth;
using namespace Aws::Client;
using namespace Aws::${metadata.namespace};
using namespace Aws::${metadata.namespace}::Model;
using namespace Aws::Http;
using namespace Aws::Utils::Json;


static const char* SERVICE_NAME = "${metadata.signingName}";
static const char* ALLOCATION_TAG = "${className}";

#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientSourceInit.vm")

#foreach($operation in $serviceModel.operations)
${operation.name}Outcome ${className}::${operation.name}(const ${operation.request.shape.name}& request) const
{
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientOperationRequestRequiredMemberValidate.vm")
#if($operation.name != "Predict")
#parse("com/amazonaws/util/awsclientgenerator/velocity/cpp/ServiceClientOperationEndpointPrepareCommonBody.vm")
#if($operation.http.requestUri.contains("?"))
  Aws::StringStream ss;
#end
#set($uriParts = $operation.http.requestUriParts)
#set($uriVars = $operation.http.requestParameters)
#set($partIndex = 1)
#set($uriPartString = "${uriParts.get(0)}")
#set($queryStart = false)
#if($uriPartString.contains("?"))
#set($queryStart = true)
#set($pathAndQuery = $operation.http.splitUriPartIntoPathAndQuery($uriPartString))
#if(!$pathAndQuery.get(0).isEmpty())
  uri.AddPathSegments("${pathAndQuery.get(0)}");
#end
  ss.str("${pathAndQuery.get(1)}");
#elseif(!$uriPartString.equals("/"))
  uri.AddPathSegments("$uriPartString");
#end
#foreach($var in $uriVars)
#set($varIndex = $partIndex - 1)
#set($uriVar = $uriVars.get($varIndex).replace('+', ''))
#set($greedySyntax = $uriVars.get($varIndex).contains("+"))
#set($partShapeMember = $operation.request.shape.getMemberByLocationName($uriVar))
#if($partShapeMember.shape.enum)
#set($parameter = "${partShapeMember.shape.name}Mapper::GetNameFor${partShapeMember.shape.name}(request.Get${CppViewHelper.convertToUpperCamel($operation.request.shape.getMemberNameByLocationName($uriVar))}())")
#else
#set($parameter = "request.Get${CppViewHelper.convertToUpperCamel($operation.request.shape.getMemberNameByLocationName($uriVar))}()")
#end
#if($queryStart)
  ss << $parameter;
#else
#if($greedySyntax)
  uri.AddPathSegments($parameter);
#else
  uri.AddPathSegment($parameter);
#end
#end
#if($uriParts.size() > $partIndex)
#set($uriPartString = "${uriParts.get($partIndex)}")
#if(!$queryStart && $uriPartString.contains("?"))
#set($queryStart = true)
#set($pathAndQuery = $operation.http.splitUriPartIntoPathAndQuery($uriPartString))
#if(!$pathAndQuery.get(0).isEmpty())
  uri.AddPathSegments("${pathAndQuery.get(0)}");
#end
  ss.str("${pathAndQuery.get(1)}");
#elseif(!$uriPartString.equals("/"))
  uri.AddPathSegments("$uriPartString");
#end
#end
#set($partIndex = $partIndex + 1)
#end
#if($queryStart)
  uri.SetQueryString(ss.str());
#end
  return ${operation.name}Outcome(MakeRequest(uri, request, Aws::Http::HttpMethod::HTTP_${operation.http.method}));
#else
  return ${operation.name}Outcome(MakeRequest(request.GetPredictEndpoint(), request, Aws::Http::HttpMethod::HTTP_${operation.http.method}));
#end
}

${operation.name}OutcomeCallable ${className}::${operation.name}Callable(const ${operation.request.shape.name}& request) const
{
  auto task = Aws::MakeShared< std::packaged_task< ${operation.name}Outcome() > >(ALLOCATION_TAG, [this, request](){ return this->${operation.name}(request); } );
  auto packagedFunction = [task]() { (*task)(); };
  m_executor->Submit(packagedFunction);
  return task->get_future();
}

void ${className}::${operation.name}Async(const ${operation.request.shape.name}& request, const ${operation.name}ResponseReceivedHandler& handler, const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context) const
{
  m_executor->Submit( [this, request, handler, context](){ this->${operation.name}AsyncHelper(request, handler, context); } );
}

void ${className}::${operation.name}AsyncHelper(const ${operation.request.shape.name}& request, const ${operation.name}ResponseReceivedHandler& handler, const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context) const
{
  handler(this, request, ${operation.name}(request), context);
}

#end
